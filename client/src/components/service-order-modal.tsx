import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Loader2, Check } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { insertContactSchema, type Service, type InsertContact } from "@shared/schema";

interface ServiceOrderModalProps {
  isOpen: boolean;
  onClose: () => void;
  service: Service | null;
}

export function ServiceOrderModal({ isOpen, onClose, service }: ServiceOrderModalProps) {
  if (!service) return null;

  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');

  // Enhanced validation schema (same as contact form)
  const validationSchema = insertContactSchema.extend({
    name: z.string()
      .min(2, "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏")
      .max(50, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º 50 —Å–∏–º–≤–æ–ª—ñ–≤")
      .regex(/^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ'\s-]+$/, "–Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏"),
    phone: z.string()
      .min(10, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π")
      .regex(/^(\+380|380|0)(39|50|63|66|67|68|73|91|92|93|94|95|96|97|98|99)\d{7}$/, "–í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–æ–±—ñ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä (+380XX, 380XX –∞–±–æ 0XX)"),
    message: z.string()
      .min(10, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤")
      .max(500, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º 500 —Å–∏–º–≤–æ–ª—ñ–≤")
  });

  const form = useForm<InsertContact>({
    resolver: zodResolver(validationSchema),
    defaultValues: {
      name: "",
      phone: "",
      message: ""
    }
  });

  const contactMutation = useMutation({
    mutationFn: (data: InsertContact) => apiRequest("POST", "/api/contacts", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/contacts"] });
      setSubmitStatus('success');
      form.reset();
      toast({
        title: "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
        description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å–ª—É–≥—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        duration: 5000,
      });
      setTimeout(() => {
        setSubmitStatus('idle');
        onClose();
      }, 3000);
    },
    onError: (error) => {
      setSubmitStatus('error');
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
        variant: "destructive",
      });
      console.error("Contact submission error:", error);
    }
  });

  const handleClose = () => {
    form.reset();
    setSubmitStatus('idle');
    onClose();
  };

  const onSubmit = (data: InsertContact) => {
    console.log('üöÄ Form submitted with data:', data);
    console.log('üìã Service info:', service);
    setSubmitStatus('idle');
    // Add service name to message
    const orderData = {
      ...data,
      message: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏: ${service.title}\n\n${data.message}`
    };
    console.log('üì¶ Sending order data:', orderData);
    contactMutation.mutate(orderData);
  };

  if (submitStatus === 'success') {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="sm:max-w-md">
          <div className="text-center py-8">
            <div className="mx-auto flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
              <Check className="w-8 h-8 text-green-600" />
            </div>
            <h3 className="text-lg font-semibold text-slate-800 mb-2">
              –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!
            </h3>
            <p className="text-slate-600 mb-4">
              –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å–ª—É–≥—É "<strong>{service.title}</strong>" —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞.
            </p>
            <p className="text-sm text-slate-500">
              –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.
            </p>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold text-slate-800">
            –ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É: {service.title}
          </DialogTitle>
        </DialogHeader>
        
        <div className="mt-4">
          <div className="mb-4 p-3 bg-slate-50 rounded-lg border">
            <p className="text-sm text-slate-600">–ü–æ—Å–ª—É–≥–∞:</p>
            <p className="font-medium text-slate-800">{service.title}</p>
          </div>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-700">–Ü–º'—è *</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
                        className="border-slate-300 focus:border-[#00a7c7] focus:ring-[#00a7c7]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage className="text-red-600 text-sm" />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-700">–¢–µ–ª–µ—Ñ–æ–Ω *</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="+380XXXXXXXXX"
                        className="border-slate-300 focus:border-[#00a7c7] focus:ring-[#00a7c7]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage className="text-red-600 text-sm" />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="message"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-700">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è *</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="–û–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏..."
                        className="border-slate-300 focus:border-[#00a7c7] focus:ring-[#00a7c7] min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage className="text-red-600 text-sm" />
                  </FormItem>
                )}
              />

              <div className="flex justify-end pt-4">
                <Button 
                  type="submit" 
                  className="bg-[#00a7c7] hover:bg-[#feab6b] text-white"
                  disabled={contactMutation.isPending}
                >
                  {contactMutation.isPending ? (
                    <div className="flex items-center space-x-2">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span>–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...</span>
                    </div>
                  ) : (
                    "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É"
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </div>
      </DialogContent>
    </Dialog>
  );
}